/*
.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "qiniu.com/qvirt/apis/qvm/v1alpha1"
)

// QvmLister helps list Qvms.
// All objects returned here must be treated as read-only.
type QvmLister interface {
	// List lists all Qvms in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Qvm, err error)
	// Qvms returns an object that can list and get Qvms.
	Qvms(namespace string) QvmNamespaceLister
	QvmListerExpansion
}

// qvmLister implements the QvmLister interface.
type qvmLister struct {
	indexer cache.Indexer
}

// NewQvmLister returns a new QvmLister.
func NewQvmLister(indexer cache.Indexer) QvmLister {
	return &qvmLister{indexer: indexer}
}

// List lists all Qvms in the indexer.
func (s *qvmLister) List(selector labels.Selector) (ret []*v1alpha1.Qvm, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Qvm))
	})
	return ret, err
}

// Qvms returns an object that can list and get Qvms.
func (s *qvmLister) Qvms(namespace string) QvmNamespaceLister {
	return qvmNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// QvmNamespaceLister helps list and get Qvms.
// All objects returned here must be treated as read-only.
type QvmNamespaceLister interface {
	// List lists all Qvms in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Qvm, err error)
	// Get retrieves the Qvm from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Qvm, error)
	QvmNamespaceListerExpansion
}

// qvmNamespaceLister implements the QvmNamespaceLister
// interface.
type qvmNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Qvms in the indexer for a given namespace.
func (s qvmNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Qvm, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Qvm))
	})
	return ret, err
}

// Get retrieves the Qvm from the indexer for a given namespace and name.
func (s qvmNamespaceLister) Get(name string) (*v1alpha1.Qvm, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("qvm"), name)
	}
	return obj.(*v1alpha1.Qvm), nil
}
